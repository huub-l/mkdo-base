// Utility mixins.
// --------------------------------------------------------------------------

/// Event wrapper for anchors/buttons.
/// @link https:///twitter.com/csswizardry/status/478938530342006784
/// @group events
/// @param {Bool} $self [false] - Whether or not to include current selector.
/// @example scss - Change anchor text colour on event.
/// 	.read-more-link {
/// 		color: #000;
///
/// 		@include mkdo-on-event {
/// 			color: #ff0000;
/// 		}
/// 	}
///
@mixin mkdo-on-event($self: false) {
	@if $self {
		&,
		&:hover,
		&:active,
		&:focus {
			@content;
		}
	} @else {
		&:hover,
		&:active,
		&:focus {
			@content;
		}
	}
}

/// Media queries.
/// @group responsive
/// @link http:///sass-guidelin.es/#breakpoint-manager
/// @param {String} $breakpoint-1 - Breakpoint 1
/// @param {String} $breakpoint-2 [false] - Breakpoint 2
/// @requires $mkdo-breakpoints
/// @example scss - Change font sizes at different breakpoints.
/// 	.entry-title {
/// 		font-size: mkdo-rem(24px);
///
/// 		@include mkdo-mq(xs) {
/// 			font-size: mkdo-rem(28px);
/// 		}
///
/// 		@include mkdo-mq(xs, sm-max) {
/// 			font-size: mkdo-rem(32px);
/// 		}
///
/// 		@include mkdo-mq(md) {
/// 			font-size: mkdo-rem(36px);
/// 		}
/// 	}
@mixin mkdo-mq($breakpoint-1, $breakpoint-2: false) {
	$points: map-merge($mkdo-breakpoints, $mkdo-tweakpoints);
	$query-1: map-get($points, $breakpoint-1);
	$query-2: map-get($points, $breakpoint-2);

	@if not $query-1 {
		@error "No value found for `#{$breakpoint-1}`. Please make sure it is defined in either the `$mkdo-breakpoints` or `$mkdo-tweakpoints` maps.";
	}

	@if $breakpoint-2 and not $query-2 {
		@error "No value found for `#{$breakpoint-2}`. Please make sure it is defined in either the `$mkdo-breakpoints` or `$mkdo-tweakpoints` maps.";
	}

	@if not $query-2 {
		$query-a: if(
			type-of($query-1) == 'string',
			unquote($query-1),
			inspect($query-1)
		);
		@media screen and #{$query-a} {
			@content;
		}
	} @else {
		$query-a: if(
			type-of($query-1) == 'string',
			unquote($query-1),
			inspect($query-1)
		);
		$query-b: if(
			type-of($query-2) == 'string',
			unquote($query-2),
			inspect($query-2)
		);
		@media screen and #{$query-a} and #{$query-b} {
			@content;
		}
	}
}

/// Input placeholder styling
/// @group forms
/// @param {List} $styles - Styles
/// @requires $mkdo-ph--prefixes
/// @example scss - Change the text input placeholder text to red and bold.
/// 	input[type="text"] {
/// 		@include mkdo-placeholder-styles( 'color #ff0000 ', 'font-weight bold' );
/// 	}

$mkdo-ph--prefixes: '::-webkit-input-placeholder', '::-moz-placeholder',
	':-ms-input-placeholder', '::placeholder' !default;

@mixin mkdo-placeholder-styles($styles) {
	@each $pseudo in $mkdo-ph--prefixes {
		@at-root &#{$pseudo} {
			@each $key, $value in $styles {
				#{$key}: #{$value};
			}
		}

		@at-root &:focus#{$pseudo} {
			color: transparent;
		}
	}
}

@mixin mkdo-responsive-embed($size: 16x9) {
	height: 0;
	margin: mkdo-rem($global--spacing-common) 0;
	overflow: hidden;

	@if $size == 16x9 {
		// 16:9 aspect ratio.
		padding-bottom: 56.25%;
	}

	@if $size == 4x3 {
		// 4:3 aspect ratio.
		padding-bottom: 75%;
	}

	position: relative;

	> div,
	> iframe,
	> object {
		bottom: 0;
		height: 100% !important;
		left: 0;
		position: absolute;
		right: 0;
		top: 0;
		width: 100% !important;
	}

	> iframe,
	> object {
		border: 0;
	}
}
